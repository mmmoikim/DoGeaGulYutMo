import java.io.BufferedWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Room {
	private List<BufferedWriter> list_writer;
	private int room_num;
	private int state; // 0 = empty, 1 = ready, 2 = ing
	private int maxplayer;
	private List<Player> player;
	private int currplayer;
	private Mal board[][];

	Room() {
		room_num = -1;
		state = 0;
		maxplayer = 0;
		player = new ArrayList<Player>();
		currplayer = -1;
		list_writer = Collections
				.synchronizedList(new ArrayList<BufferedWriter>());
		board = new Mal[9][9];
		
	}
	
	public void put_state(int num)
	{
		state = num;
	}


	public void send_Room_member(String message, int turn) {
		//turn -1이면 다, 아니면 그번호만 빼고 전송
		try {
		if (turn == -1) {
		
				for (BufferedWriter writer : list_writer) {
					writer.write(message);
					writer.flush();
				}
		}
		else
		{
			for (int i=0; i<list_writer.size(); i++) {
				if(i != turn)
				{
					System.out.println("보냄 : " + message);
					list_writer.get(i).write(message);
					list_writer.get(i).flush();
				}
		}
		}
			} catch (IOException e) {
				System.out.println("send failed" + e);
			}

	}

	public String golin_mal(int player_num, int mal_num) {
		int piggy_num = player.get(player_num).out_mal(mal_num).out_piggy_num();
		player.get(player_num).out_mal(mal_num).goal_in_mal();
		System.out.println(player_num + "번 플레이어" + piggy_num + "마리 업혀있던 "
				+ mal_num + "번말 골인");
		return player_num + "#" + mal_num + "#" + piggy_num;
	}

	public String set_board(int x, int y, int player_num, int mal_num) {
		String result = "none# # # # #";

		
		if (board[x][y] != null)// 보드에 뭐가 있으면
		{
			if (player.get(board[x][y].out_plyer_num())
					.out_mal(board[x][y].out_mal_num()).out_plyer_num() != player_num) {
				// 내말 아니면 잡음
				System.out.println(board[x][y].out_plyer_num() + "번 플레이어의");
				System.out.println(board[x][y].out_piggy_num() + "마리 업혀있던");
				System.out.println(board[x][y].out_mal_num() + "번 말이");
				System.out.println(player_num + "번 플레이어 " + mal_num
						+ "번 말 한테 잡힘\n");
				
				int caught_player = board[x][y].out_plyer_num();
				int caught_num = board[x][y].out_piggy_num();
				int caught_mal = board[x][y].out_mal_num();
				int catch_player = player_num;
				int catch_mal = mal_num;
				
				result = "catch#" + caught_player +"#"+ caught_num +"#"+ caught_mal
						+"#"+ catch_player +"#"+ catch_mal;
				
				player.get(board[x][y].out_plyer_num())
						.out_mal(board[x][y].out_mal_num()).be_caught_mal();
				board[x][y] = null;
				
				return result;
				
			} else {
				// 내말이면 업기
				int ori_piggy_num = player.get(board[x][y].out_plyer_num())
						.out_mal(board[x][y].out_mal_num()).out_piggy_num();
				// 원래 있던거에 몇개 업혀 있었나
				player.get(player_num).out_mal(mal_num)
						.piggy_mal(ori_piggy_num);
				// 원래 업혀있던거 지금 업은말에 더하기
				player.get(board[x][y].out_plyer_num())
						.out_mal(board[x][y].out_mal_num()).ride_on_other();
				// 원래꺼 업힘상태 만들기
				System.out.println(player_num + "번 플레이어");
				System.out.println(mal_num + "번 말이");
				System.out.println(ori_piggy_num + "마리 업음  총 : "
						+ (++ori_piggy_num) + "마리\n");

				
				result = "piggy#" + player_num +"#"+ mal_num +"#"+ ori_piggy_num
						+"# "+"# ";
				return result;
				
			}
		}
		board[x][y] = player.get(player_num).out_mal(mal_num);
		return result;

	}

	public void mal_state_change(int player_num, int mal_num, int state) {
		player.get(player_num).out_mal(mal_num).change_mal_state(state);
	}

	public int out_currplayer() {
		return currplayer;
	}

	public int out_room_num() {
		return room_num;
	}

	public int out_state() {
		return state;
	}

	public int out_maxplayer() {
		return maxplayer;
	}

	public void put_room_num(int temp) {
		room_num = temp;
	}

	public void put_maxplayer(int temp) {
		maxplayer = temp;
	}

	public int add_player(BufferedWriter writer)// 추가하면 1 / 아니면 0
	{
		if (state == 0) {
			currplayer++;
			Player temp = new Player();
			temp.set_room_num(room_num);
			temp.set_turn(currplayer);
			player.add(temp);
			list_writer.add(writer);
			
		
			System.out.println("maxplayer : " + maxplayer +"player.size : " + player.size() + "curr : " + currplayer);
			if (maxplayer == player.size())
			{
				state = 1;
			}

			return 1;
		} else {
			System.out.println("player full");
			return 0;
		}
	}


	public Player out_player(int num)// 플레이어 번호,턴
	{
		return player.get(num);

	}
}
