package com.sasha.sasha;

import net.netmarble.m.platform.api.MobilePlatform;
import net.netmarble.m.platform.api.Netmarble;
import net.netmarble.m.platform.api.Result;
import net.netmarble.m.platform.api.listener.InitializeListener;
import net.netmarble.m.platform.api.listener.SignInListener;
import net.netmarble.m.platform.api.listener.SignOutListener;
import net.netmarble.m.platform.api.listener.UserListener;
import net.netmarble.m.platform.api.model.User;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;

import com.unity3d.player.UnityPlayer;

public class MainActivity extends Activity {
    private UnityPlayer unityPlayer;
    
	private SignInListener signInListener;
	private SignOutListener signOutListener;
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setTheme(android.R.style.Theme_NoTitleBar_Fullscreen);
        requestWindowFeature(Window.FEATURE_NO_TITLE);

        unityPlayer = new UnityPlayer(this);
        
        if (unityPlayer.getSettings().getBoolean("hide_status_bar", true)) {
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        int glesMode = unityPlayer.getSettings().getInt("gles_mode", 1);
        boolean trueColor8888 = false;
        unityPlayer.init(glesMode, trueColor8888);

        setContentView(R.layout.activity_main);

        View playerView = unityPlayer.getView();
        RelativeLayout layout = (RelativeLayout) findViewById(R.id.main_layout);
        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
        layout.addView(playerView, lp);

        playerView.requestFocus();
        
        initialize();
    }
    
    /**
     * �룸쭏釉�S 珥덇린��
     */
    public void initialize() {
    	try {
			Netmarble.initialize(this, R.xml.configuration, new InitializeListener() {
				
				@Override
				public void onInitialized(final Result result) {
					final Activity activity = MainActivity.this;
					activity.runOnUiThread(new Runnable() {
						
						@Override
						public void run() {
							if (true == result.isSuccess()) {
								initComplete();
							} else {
								closeGame("�뚮┝", result.getMessage(), false);
							}
						}
					});
				}
			});
		} catch (Exception e) {
			e.printStackTrace();
			// XXX : configuration.xml ���섎せ�섏뼱 �덉쓣 媛�뒫�깆씠 �믪뒿�덈떎.
		}
    }

    @Override
    public void onResume() {
        super.onResume();
        unityPlayer.resume();
    }
    
    @Override
    public void onPause() {
        super.onPause();
        unityPlayer.pause();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        unityPlayer.quit();
        
        // XXX : 寃뚯엫��醫낅즺�����몄텧�⑸땲��
        // 紐⑤뱺 Activity ���ｌ쑝硫��덈맗�덈떎. Main ���섎뒗 Activity �먯꽌留��몄텧�섏꽭��
        Netmarble.destroy(getApplicationContext());
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super. onConfigurationChanged(newConfig);
        unityPlayer.configurationChanged(newConfig);
    }

    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
        super. onWindowFocusChanged(hasFocus);
        unityPlayer.windowFocusChanged(hasFocus);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return unityPlayer.onKeyDown(keyCode, event);
    }

    @Override
    public boolean onKeyUp(int keyCode, KeyEvent event) {
        return unityPlayer.onKeyUp(keyCode, event);
    }
    
    protected void closeGame(String title, String message, boolean cancelable) {
		final Activity activity = this;
		
		Dialog dialog = new AlertDialog.Builder(activity)
		.setTitle(title)
		.setMessage(message)
		.setCancelable(cancelable)
		.setPositiveButton(R.string.confirm, new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
				
				// 寃뚯엫��醫낅즺�����몄텧�⑸땲��
				Netmarble.destroy(activity);
				
				Intent intent = new Intent();
				intent.setAction(Intent.ACTION_MAIN);
				intent.addCategory(Intent.CATEGORY_HOME);
				startActivity(intent);
				
				android.os.Process.killProcess(android.os.Process.myPid());
			}
		})
		.create();
		
		dialog.show();
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		
		// 紐⑤뱺 Activity ��onActivityResult �먯꽌 �몄텧�⑸땲��
		Netmarble.onActivityResult(this, requestCode, resultCode, data);
	}
	
	/**
	 * 珥덇린���꾨즺 ��濡쒓렇���щ� �뺤씤
	 */
	private void initComplete() {
		if (signInListener == null) {
			signInListener = new SignInListener() {
				
				@Override
				public void onSignIn(final Result result, final String userKey) {
					// UI���쒖떆媛��꾩슂���꾩뿉����긽 runOnUiThread 諛�handler 瑜��듯븯��UI Thread �먯꽌 �묒뾽���섑뻾�댁빞 �⑸땲��
					final Activity activity = MainActivity.this;
					activity.runOnUiThread(new Runnable() {
						
						@Override
						public void run() {
							if (Result.OK == result.getResponse()) {
								// 濡쒓렇�몄씠 �꾨즺�섏뿀�듬땲��
								isLogin("true");
								getUser();
							} else if (Result.TIMEOUT == result.getResponse()) {
								// �ㅼ씠�쇰줈洹몃� �댁슜�섏뿬 �ㅻ쪟硫붿떆吏�� �꾨떖���� �ㅼ떆 濡쒓렇�몄쓣 �쒕룄�댁＜�몄슂.
								
								// TODO : 肄붾뱶瑜��묒꽦��二쇱꽭��
							} else if (Result.NETWORK_UNAVAILABLE == result.getResponse()) {
								// �ㅼ씠�쇰줈洹몃� �댁슜�섏뿬 �ㅻ쪟硫붿떆吏�� �꾨떖���� �ㅼ떆 濡쒓렇�몄쓣 �쒕룄�댁＜�몄슂.
								
								// TODO : 肄붾뱶瑜��묒꽦��二쇱꽭��
							} else if (Result.USER_CANCELED == result.getResponse()) {
								// �좎�媛�濡쒓렇�몄쓣 �꾨즺�섏� �딄퀬 痍⑥냼��寃쎌슦�낅땲��
								// �ㅼ떆 濡쒓렇�몄쓣 �좊룄�섍굅��寃뚯엫醫낅즺瑜�吏꾪뻾�섏떆湲�諛붾엻�덈떎.
								
								// TODO : 肄붾뱶瑜��묒꽦��二쇱꽭��
							} else {
								// 濡쒓렇���붾㈃���몄텧�섏떆湲�諛붾엻�덈떎.
								// TODO : 肄붾뱶瑜��묒꽦��二쇱꽭��
								isLogin("false");
							}
						}
					});
				}
			};
		}
		
		Netmarble.persistedSignIn(MainActivity.this, signInListener);
	}
	
	/**
	 * 濡쒓렇���щ� Unity���꾩넚
	 * @param isLogin
	 */
	private void isLogin(String isLogin) {
		UnityPlayer.UnitySendMessage("AndroidManager", "isLogin", isLogin);
	}
	
	/**
	 * �좎� �뺣낫 媛�졇�ㅺ린
	 */
	private void getUser() {
		MobilePlatform.getUser(MainActivity.this, new UserListener() {
			
			@Override
			public void onReceiveUser(final Result result, final User user) {
				final Activity activity = MainActivity.this;
				activity.runOnUiThread(new Runnable() {
					
					@Override
					public void run() {
						if (Result.OK == result.getResponse()) {
							// �좎� �뺣낫瑜�媛�졇 �붿뒿�덈떎.
							String userKey = user.getUserKey();
							String nickName = user.getProfile().getNickname();
							
							UnityPlayer.UnitySendMessage("AndroidManager", "SetUserKeyAndNickName", userKey + "," + nickName);
						} else {
							// �좎� �뺣낫瑜�媛�졇�ㅻ뒗���ㅽ뙣�덉뒿�덈떎.
						}
					}
				});
				
			}
		});
	}
	
	/**
	 * 濡쒓렇�����붾㈃ 蹂댁뿬二쇨린
	 */
	public void showLoginForm() {
		Netmarble.signIn(MainActivity.this, signInListener);
	}
	
	/**
	 * 濡쒓렇 �꾩썐
	 */
	public void logout() {
		if (signOutListener == null) {
			signOutListener = new SignOutListener() {
				
				@Override
				public void onSignOut(final Result result) {
					final Activity activity = MainActivity.this;
					
					activity.runOnUiThread(new Runnable() {
						
						@Override
						public void run() {
							if (Result.OK == result.getResponse()) {
								// TODO 濡쒓렇�꾩썐 寃곌낵
							} else {
								// 濡쒓렇�꾩썐 �ㅽ뙣
							}
							isLogin("false");
						}
					});
				}
			};
		}
		
		Netmarble.signOut(MainActivity.this, signOutListener);
	}
	
}
